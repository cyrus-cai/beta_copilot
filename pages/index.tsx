import {
  Button,
  Input,
  Loading,
  Modal,
  Progress,
  Spacer,
  useModal,
} from "@geist-ui/core";
import toast, { Toaster } from "react-hot-toast";
import { useEffect, useState } from "react";
import { mincuCore, uiModule } from "mincu-react";
import CardComponent from "./components/card";
import Head from "next/head";
import HeaderComponent from "./components/header";
import NonSSRWrapper from "./utils/no-ssr-wrapper";
import { dataModule } from "mincu-react";
import { useMicroAppsStore } from "../stores/useMicroAppStore";
const isApp = mincuCore.isApp;

interface AppProps {
  id: number;
  name: String;
  description: String;
  url: String;
  imageSrc: String;
  category: String;
  status: number;
}

export default function Home() {
  const { microApps, fetchMicroApps } = useMicroAppsStore();
  const [progress, setProgress] = useState(0);
  const [isLoading, setIsLoading] = useState(false);
  const [linkCode, setLinkCode] = useState("");
  const { myMicroApps, fetchMyMicroApps } = useMicroAppsStore();
  const userId =
    process.env.NODE_ENV === "development"
      ? ""
      : dataModule.userInfo.profile.entireProfile?.base_info?.xh;

  const { visible, setVisible, bindings } = useModal();

  useEffect(() => {
    const urlParams = new URLSearchParams(window.location.search);
    setLinkCode(urlParams.get("lc") ?? "");
    urlParams.get("lc") && setVisible(true);
    incrementProgress();
  }, []);

  useEffect(() => {
    if (microApps.length !== 0) {
      setProgress(100);
    }
  }, [microApps.length]);

  useEffect(() => {
    fetchMyMicroApps(userId);
  }, [userId, fetchMyMicroApps]);

  const incrementProgress = () => {
    const interval = setInterval(() => {
      setProgress((oldProgress) => {
        if (oldProgress < 90) {
          return oldProgress + 1; // Increase progress by 1% per interval up to 90%
        } else if (oldProgress < 100) {
          // After 90%, decrease speed of progress. The higher the sprogress, the slower it increases.
          return oldProgress + (100 - oldProgress) * 0.02; // Increase by 2% of the remaining progress
        } else {
          clearInterval(interval);
          return oldProgress; // Return current progress when reaching 100
        }
      });
    }, 16); // 16 milliseconds per interval
  };

  const addBySearch = () => {
    if (linkCode.length == 0) {
      toast.error("Please enter a link code");
      return;
    }

    const asyncFunction = async () => {
      const fetchResponse = await fetch("/api/fetchHidden", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          linkCode,
        }),
      });
      if (!fetchResponse.ok) {
        const errorData = await fetchResponse.json();
        throw new Error(errorData.error);
      }
      const data = await fetchResponse.json();

      if (isLoading) {
        throw new Error(
          "Please wait until the current request has finished..."
        );
      }

      setIsLoading(true);

      const updateResponse = await fetch("/api/updateUserApp", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          userId: userId,
          microAppId: data.microApp.id,
          action: "add",
        }),
      });

      if (!updateResponse.ok) {
        throw new Error("No content found");
      }

      setIsLoading(false);
      return "Successfully added";
    };

    toast.promise(asyncFunction(), {
      loading: "Processing...",
      success: (res) => res,
      error: (err) => err.message,
    });
  };

  useEffect(() => {
    if (!microApps.length) {
      fetchMicroApps();
    }
  }, []);

  async function handleAdd(microApp: AppProps) {
    if (isLoading) {
      const notifyConflict = toast.error(
        "please waiting until current request finished..."
      );
      {
        notifyConflict;
      }
      return;
    }
    setIsLoading(true);

    if (isAppAdded(microApp)) {
      return;
    }

    toast.promise(
      (async () => {
        const response = await fetch("/api/updateUserApp", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({
            userId: userId,
            microAppId: microApp.id,
            action: "add",
          }),
        });
        if (!response.ok) {
          throw new Error("Add Failed");
        }
        await fetchMyMicroApps(userId);
        setIsLoading(false);
        return response;
      })(),
      {
        loading: "Processing...",
        success: "Successful Added",
        error: "Add Failed",
      }
    );
  }

  const isAppAdded = (microApp: AppProps): boolean => {
    return myMicroApps.some((app) => app.id === microApp.id);
  };

  return (
    <>
      <NonSSRWrapper>
        <Head>
          <title>Create Next App</title>
          <meta name="description" content="Generated by create next app" />
          <meta
            name="viewport"
            content="initial-scale=1.0, width=device-width, user-scalable=no"
          />
          <link rel="icon" href="/favicon.ico" />
        </Head>
        {isApp && progress == 100 ? (
          <div>
            <HeaderComponent />
            <Input
              placeholder="Enter link code"
              onChange={(e) => setLinkCode(e.target.value)}
            />
            <Spacer h={0.5} />
            <Button onClick={addBySearch}>Add</Button>
            {microApps.map((data: AppProps) =>
              isAppAdded(data) ? (
                <CardComponent
                  key={data.id}
                  imageSrc={data.imageSrc}
                  title={data.name}
                  description={data.description}
                  url={data.url}
                  AppStatus={data.status}
                  existed={true}
                />
              ) : (
                <CardComponent
                  key={data.id}
                  imageSrc={data.imageSrc}
                  title={data.name}
                  description={data.description}
                  url={data.url}
                  AppStatus={data.status}
                  handleAdd={() => handleAdd(data)}
                />
              )
            )}
            <Toaster />
          </div>
        ) : (
          <div className="flex items-center justify-center h-screen">
            <div className="flex flex-col items-center justify-center">
              {isApp ? (
                <>
                  <div className="mb-4">Odyssey is Loading...</div>
                  <div className="w-24">
                    <Progress value={progress} />
                  </div>
                </>
              ) : (
                <div>Please Open in ÂçóÂ§ßÂÆ∂Âõ≠ üá∏üá¨</div>
              )}
            </div>
          </div>
        )}
        <Modal {...bindings}>
          <Modal.Title>Confirm add?</Modal.Title>
          <Modal.Content>
            <p>You are using a url to add a Beta MicroApp</p>
          </Modal.Content>
          <Modal.Action passive onClick={() => setVisible(false)}>
            Cancel
          </Modal.Action>
          <Modal.Action
            onClick={() => {
              addBySearch();
              setVisible(false);
            }}
          >
            Confirm
          </Modal.Action>
        </Modal>
      </NonSSRWrapper>
    </>
  );
}
