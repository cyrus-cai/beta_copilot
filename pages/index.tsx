import { Button, Input, Spacer } from "@geist-ui/core";
import toast, { Toaster } from "react-hot-toast";
import { useEffect, useState } from "react";

import CardComponent from "./components/card";
import Head from "next/head";
import HeaderComponent from "./components/header";
import { JSONStringify } from "lib/tool";
import NonSSRWrapper from "./utils/no-ssr-wrapper";
import { dataModule } from "mincu-react";
import { useMicroAppsStore } from "../stores/useMicroAppStore";

interface AppProps {
  id: number;
  name: String;
  description: String;
  url: String;
  imageSrc: String;
  category: String;
  status: number;
}

export default function Home() {
  const { microApps, fetchMicroApps } = useMicroAppsStore();
  const [isLoading, setIsLoading] = useState(false);
  const [linkCode, setLinkCode] = useState("");
  const userId = dataModule.userInfo.profile.entireProfile?.base_info?.xh ?? "";
  // const userId = "5701119201"

  const addBySearch = async () => {
    try {
      const response = await fetch("/api/fetchHidden", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          linkCode,
        }),
      });

      if (!response.ok) {
        throw new Error("Error while fetching the microApp from the user.");
      }

      const data = await response.json();
      handleAdd(data.microApp);

    } catch (error) {
      console.error(error);
      // You may want to handle errors more gracefully here
    }
  };

  useEffect(() => {
    if (!microApps.length) {
      fetchMicroApps();
    }
  }, []);

  async function handleAdd(microApp: AppProps) {
    if (isLoading) {
      const notifyConflict = toast.error(
        "please waiting until current request finished..."
      );
      {
        notifyConflict;
      }
      return;
    }
    setIsLoading(true);

    toast.promise(
      (async () => {
        const response = await fetch("/api/updateUserApp", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({
            userId: userId,
            microAppId: microApp.id,
            action: "add",
          }),
        });
        if (!response.ok) {
          throw new Error("Error while adding the microApp to the user.");
        }
        setIsLoading(false);
        return response;
      })(),
      {
        loading: "Processing...",
        success: "Successful Added",
        error: "Add Failed",
      }
    );
  }

  return (
    <>
      <NonSSRWrapper>
        <Head>
          <title>Create Next App</title>
          <meta name="description" content="Generated by create next app" />
          <meta name="viewport" content="width=device-width, initial-scale=1" />
          <link rel="icon" href="/favicon.ico" />
        </Head>
        <HeaderComponent />
        <Input
          placeholder="Scale 1"
          onChange={(e) => setLinkCode(e.target.value)}
        />{" "}
        <Spacer h={0.5} />
        <Button onClick={addBySearch}>Add</Button>
        {microApps.map((data: AppProps) => (
          <CardComponent
            key={data.id}
            imageSrc={data.imageSrc}
            title={data.name}
            description={data.description}
            url={data.url}
            AppStatus={data.status}
            handleAdd={() => handleAdd(data)}
          />
        ))}
        <Toaster />
      </NonSSRWrapper>
    </>
  );
}
