import { Button, Input, Modal, Spacer, useModal } from "@geist-ui/core";
import toast, { Toaster } from "react-hot-toast";
import { useEffect, useState } from "react";

import CardComponent from "./components/card";
import Head from "next/head";
import HeaderComponent from "./components/header";
import NonSSRWrapper from "./utils/no-ssr-wrapper";
import { dataModule } from "mincu-react";
import { useMicroAppsStore } from "../stores/useMicroAppStore";

interface AppProps {
  id: number;
  name: String;
  description: String;
  url: String;
  imageSrc: String;
  category: String;
  status: number;
}

export default function Home() {
  const { microApps, fetchMicroApps } = useMicroAppsStore();
  const [isLoading, setIsLoading] = useState(false);
  const [linkCode, setLinkCode] = useState("");
  const userId = dataModule.userInfo.profile.entireProfile?.base_info?.xh ?? "";
  // const userId = "5701119201";
  const { visible, setVisible, bindings } = useModal()

  useEffect(() => {
    // 获取URL的查询参数
    const urlParams = new URLSearchParams(window.location.search);
    setLinkCode(urlParams.get('lc') ?? "");
    urlParams.get('lc') && setVisible(true)
  }, []);

  const addBySearch = () => {
    const asyncFunction = async () => {
      const fetchResponse = await fetch("/api/fetchHidden", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          linkCode,
        }),
      });

      if (!fetchResponse.ok) {
        const errorData = await fetchResponse.json();  // 解析响应的 body
        throw new Error(errorData.error);  // 假设错误信息在 'error' 属性中
      }
      const data = await fetchResponse.json();

      if (isLoading) {
        throw new Error("Please wait until the current request has finished...");
      }

      setIsLoading(true);

      const updateResponse = await fetch("/api/updateUserApp", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          userId: userId,
          microAppId: data.microApp.id,
          action: "add",
        }),
      });

      if (!updateResponse.ok) {
        throw new Error("No content found");
      }

      setIsLoading(false);
      return 'Successfully added';
    }

    toast.promise(asyncFunction(), {
      loading: 'Processing...',
      success: (res) => res,
      error: (err) => err.message
    });
  };

  useEffect(() => {
    if (!microApps.length) {
      fetchMicroApps();
    }
  }, []);

  async function handleAdd(microApp: AppProps) {
    if (isLoading) {
      const notifyConflict = toast.error(
        "please waiting until current request finished..."
      );
      {
        notifyConflict;
      }
      return;
    }
    setIsLoading(true);

    toast.promise(
      (async () => {
        const response = await fetch("/api/updateUserApp", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({
            userId: userId,
            microAppId: microApp.id,
            action: "add",
          }),
        });
        if (!response.ok) {
          throw new Error("2222");
        }
        setIsLoading(false);
        return response;
      })(),
      {
        loading: "Processing...",
        success: "Successful Added",
        error: "Add Failed",
      }
    );
  }

  return (
    <>
      <NonSSRWrapper>
        <Head>
          <title>Create Next App</title>
          <meta name="description" content="Generated by create next app" />
          <meta name="viewport" content="width=device-width, initial-scale=1" />
          <link rel="icon" href="/favicon.ico" />
        </Head>
        <HeaderComponent />
        <Input
          placeholder="Scale 1"
          onChange={(e) => setLinkCode(e.target.value)}
        />{" "}
        <Spacer h={0.5} />
        <Button onClick={addBySearch}>Add</Button>
        {microApps.map((data: AppProps) => (
          <CardComponent
            key={data.id}
            imageSrc={data.imageSrc}
            title={data.name}
            description={data.description}
            url={data.url}
            AppStatus={data.status}
            handleAdd={() => handleAdd(data)}
          />
        ))}
        <Toaster />
        <Modal {...bindings}>
          <Modal.Title>Confirm add?</Modal.Title>
          <Modal.Content>
            <p>You are using a url to add a Beta MicroApp</p>
          </Modal.Content>
          <Modal.Action passive onClick={() => setVisible(false)}>Cancel</Modal.Action>
          <Modal.Action onClick={() => {
            addBySearch();
            setVisible(false);
          }}>Confirm</Modal.Action>
        </Modal>
      </NonSSRWrapper>
    </>
  );
}
